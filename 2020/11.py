INPUT = '''00009000009000000000000000090900000090000990900000000900000090000990000000000000000000000000000000
00000000000000000000000000090009000000000909900000000900000090000000000000000000000900000000000000
00000000009000000000009000090000000090000000000000000000000090000090090000900900000000000000000000
00090000000000090000900000000009009090000000900000000900000090000090000000900000000900000900000000
00000000009000000000000000090000900090000900000000000900000000000090000000900000000900000000000000
00000000009000000000900000000000000090000000000000000000000090000000009000000000000900000000000000
99909900900900099990999999099099999099999099990900999990099090999009099900990909990900999099009909
00000000000000000090900000090000000090000090900000000000000090000090000000000900000900000000900000
00000000090000000000900000000000000090000000900000000000000090000090000000900000000900000000000009
00000000000000000000000000000000000090000000000000000900000000000090000000900000000900000000000000
00000000000000000000000000090900009090000090900000000900000000000090000000900000000900000900000000
00000009909000000009900090090000009090000000900000000900000090000090090000900000000900009000000000
99909909090999999099990909909990909909099900900999909990999999990909000999909909909990909909900999
00000000009000000000000000090900000090000000900000000000000090000090000000000009090000000000000000
00000000000000000000900009090000000000000009900000000900000090000090000000000000000900000000000000
00090009009000000000900000990000000090000000000000009900000000000090000000900000000900090000000000
90000000009009000000900090000000000000000000900000000000000090000090000000900000000900900000000000
00000900000000000000900000090000000090000000000000000000000090000090000000900000000000000000000000
90000000000000000000909000090000000090000000000000000000990090000000000000900000000000000000000000
09999009999909999990009999990900099099990909999099990090900900999999990099990909099000099999990999
00000009000000000000000000000000000000000000009000000000000090000090009000900000000900000000000000
90099009009000000000900900000000000090000000900000900000000090000000900000000000000000000000000000
00090000000000000000900000000000000000000000900000900900000090000090000000909009000000000000000000
00000000009900000000900009090009000000000000900000000900000090000990000000000990000900000000000000
00090000009000000000900000090000000990000000990000000900000090000090000000900000000000000000000000
90000000000000000000900000090090000090000000000000000900000000000000000000000000000000000000000000
00000000000000000000900900090000000090000000900000000990009090000090000000900000099900000000000000
00090000009000000000000000090000000090000000000000000000000090000090000000900000000900000000090000
00009000009990000000000090090000000090000000900000000000000990000090000000990000000900000000000000
99099900099999999009999099999099999099099099999090900999099999900000909099999999999090099999009990
00000000000000000000900000090000000000000000900000000900000000000090000000900000000900000000000000
00000000009090009000900000090000000090000090000000000900000000000090000000000000000900000009000000
00000000000000000000000000000000000090000000900000000900000090000090000000900000000900000000009000
00000000000000009000000000090000000000000900900900000000000090000090000000000009009000900000000000
00000000009000000000000000090000000999000000000000000900000090000090000000900000000900000000000900
00000009009000000000900000000000000090000000990000000900000090000090000000900000000900000000000000
99990990909009900099099990099909099009099999909990009090909999909999999099999900999990990909900999
00000000009000000000900000090000000090000009000000000000000000000090000000900000009000000000000090
00000000009000000000900009090009000090000000900000000000000090000090000000000000000900000000000000
00000000000009000000900000000000000999000000900000000000000000000090000000000000000900000000000000
00000000009000000000000900000000099000000000000000000900000009000090000000900000000900090000000000
00000000009090000000900000000000000000000000900009000900000090000000000000000000000900090000000000
00900000009000000000900000090000000090000000090000000900090090000090000000900000000900000000000000
99009000999000999990909099999909999990999999990900999999000990099099090009900990090999990900999909
00000000009009000000000000000000000000000000000000000900000000000000000000900000000990000900000000
00000000009000000000000000090000000090000000000000900900000090900000000090900000900909000000000000
00000000009000000000900000000900000090000000000000000900000090000090000000900000000900000000000000
00000000090000000000000000090000000000000000900000000000009000000090000000900900000900000000000900
00000000000000000000900000000900000000000000000009000000000090000090009000900000900900000000000000
09909900990009990999999099999099900990990999990909990099999909090009099099990999909990909999999900
00000000009000000000000000000009000090000000000000000000000000000000000000900000009900000000000000
00000090009000000000900000000000000090900900000000000000000090000000000000000000000900000900000000
09000000009000000000000000090000000090000000000000000900009090000090000000000000000900000000000000
00000000009000900900900000000090090090000000000000000900000000000000000000900000900900000000000000
00900000000000000900900000000000000990000000000900090990000090000099000000900000000000000000000000
00000000000000900000000000090000000090009000000000000900000090000090000000990000000900000000000000
00000000009000900000900900000000000090000000900000000900000090000090000000900090090900000009000909
00000000000000000000900009000000000090009000900000000900000090000000000000000090900900000000009000
99099990999909999099999999099909999099009090990900009090009990999099009909990999909999099999990909
00000000009900090000000000090000000090009000990000000900000090000090000000000000009900990000000000
00000000009000000000900000000000000090000000900900000900000090000000000009900000000000000000000000
00000000090000000000000000099000000090000000000000000900000090000090000000000000000900009000000000
00000000009000000000900000099000000099000000900900000000000090000090000000900000000000000000000090
09000000009000000000900900090000000000000009900000000000000090000090000000900000000900000000000000
00000000009900090000000000000000000090000009000000000900000990000090000000900000000000000000000000
09999909900099999009099099009999000009009909999999099900999990099909999999999909999909099099999090
00000000009000900000900000090000000090000000900000000090000990009000000000900000000000009000000000
00000000009900000900900000090000000000000000900000000900000090000000000000900000000900000000000000
00000000009000000000900000090000000090000000900000000900009090009000000000900000000900000000000000
00000000009000000000000000090000000090000000900000000900000090000090000000900009009000000000000000
00000900009000000090000000090000000090000000000000009000000090000990000000900000000900000000000000
00000000000000000000990000090000000000000000000000000900000090000090000009900000000900000000000000
99999999000000900909909990999000999909999999000099090090990909000999099909999999099099999090909900
00000000009000000000000000090000000000000000000000000900900099000090000000900000000000000000000000
00000000009000000000900000090000000000000009900000000900000000000000000000000000000900090000000000
09000009000000000000900000090000000000090000900090000000000090000000000000900000000900000900000000
00000090009000000000000090000000000090000000900000000900000000000090009090900000000900000000000000
00090000009000000000000000090000000090000000000000000900000000000000000000000000000000000000000000
00000000000000000000090000090000000900000900900000000000000000000090000000990000000900000000000000
99009909999099999990999909999009990909909999999990099099009099990009090009990999990099999009009999
00000000009000000900900000000990000090000000000000000900000090900000000000900000000900000000009000
09000000000000900000000000090000000000000000900000900900000090000090000000900000900000000009000000
00000000009000000000900090090000000090900000000000000000000090900090000000900000000900000000000009
00000000000000000090000000090000000000000000900000009000000000000000000000000000000000009000000000
00000900009000000000900000090000900099000000900000000000000090000090000000000900000900000000000000
00000000000000000000900000090000000000000090000000000900000090000090000000900000000900000000090000
00000000000000000000000009000000000090900000000000000900000090000090000000000000000900900000000000
90909999099999999099990099909990999099099999999999990090099090909990099999990009999999000909090990
00000000009000000000000000090000090090000000000000090900000990000090000000900000000900009000000000
00000000000000000000900000000000000090000000000000000090000000000000900000900000000900000090000000
00000000009900000000900000099000000090000000000000000900000090000090000000900000000090000000000000
00000000009090000000900000000000000900000000900090000900000000090000000000000000000900000900000000
00000900000000000000900000090000000090000000000000090900000090000090000000900000000909000000000000'''

TEST = '''0900900900
0000000900
0909099099
0000900900
0900900900
0900000900
9909099999
0000000000
0900000090
0900000900'''

TEST_RESULT = '''1910901911
1000100901
0919099199
1011911901
1910900900
1910101911
9909099999
1010110101
1900000090
1910101911'''

def graph(values):
    rows = values.split('\n')
    grid = []
    row_count = len(rows)
    row_length = len(rows[0])
    for row in range(row_count):
        grid.append([])
        for column in range(row_length):
            grid[row].append(rows[row][column])
    return grid

def filled_adjacent(grid, row, rows, column, columns):
    adj_rows = [row]
    adj_columns = [column]
    if row > 0:
        adj_rows.append(row - 1)
    if column > 0:
        adj_columns.append(column - 1)
    if row < rows - 1:
        adj_rows.append(row + 1)
    if column < columns - 1:
        adj_columns.append(column + 1)

    count = 0
    for adj_row in adj_rows:
        for adj_column in adj_columns:
            if adj_row != row and adj_column != column:
                if grid[adj_row][adj_column] == '1':
                    count += 1
    return count

def solve(cases):
    rows = len(cases)
    columns = len(cases[0])
    last = None
    current = cases[:]

    while last != current:
        next = current[:]
        for row in range(rows):
            for column in range(columns):
                cell = current[row][column]
                if cell == '9':
                    continue
                adjacents = filled_adjacent(current, row, rows, column, columns)
                if cell == '1' and adjacents >= 4:
                    next[row][column] = '0'
                elif cell == '0' and adjacents == 0:
                    next[row][column] = '1'
        last = current[:]
        current = next[:]
    
    return len(TEST_RESULT.split('1')) -1

def solve2(cases):
    return solve(cases)

if __name__ == '__main__':
    test_results = solve(graph(TEST))
    if test_results != len(TEST_RESULT.split('1')) -1:
        print(test_results, 'should be', len(TEST_RESULT.split('1')) -1)
        exit()
    print('results', test_results)

    results = solve(INPUT)
    print(results)

    # test_results = solve2(TEST)
    # if test_results != 8:
    #     print(test_results, 'should be 8')
    #     exit()

    # results = solve2(INPUT)
    # print(results)